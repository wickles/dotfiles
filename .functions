#!/bin/bash
### shell-ambiguous functions


## miscellaneous

alias please='sudo '
alias fucking='sudo '
alias wget-test="wget -O /dev/null"
alias speedtest-cachefly="wget-test http://cachefly.cachefly.net/100mb.test"
alias speedtest-tele2="wget-test http://speedtest.tele2.net/100MB.zip"


## Mac specific fuctions

# commands for brew/cask stuff
#alias cask="brew cask"
alias brew-cask-upgrade="brew cask install --force"
# fix app store being retarded by killing all the shit
alias fix-appstore="pkill storedownload storeasset storeacc storeuid storeleg storeinst"
# fix Dock and/or Launchpad
alias fix-dock="killall Dock"
# reload hosts file -- must be run with sudo
alias reload-hosts="dscacheutil -flushcache; killall -HUP mDNSResponder"

# new functions for cask
brew-cask-installed () {
    local installed=$(brew cask list --versions)
    if [ -z "$1" ]; then
        echo "$installed"
    else
        for app in "$@"; do
            echo "$installed" | grep "$app"
        done
    fi
}

brew-cask-outdated () {
    local installed=$(brew cask list --versions)
    local warn=""
    # if no arguments provided
    if [ -z "$1" ]; then
        echo "$installed" | while read line; do
            local app=$(echo $line | awk '{print $1;}')
            local latest=$(brew cask _stanza version $app)
            local tests=$(echo $line | grep $latest)
            if [ -z "$tests" ]; then
                echo "$line < $latest"
            fi
            if [ -n "$(echo $line | grep latest)" ] || [ -n "$(echo $latest | grep latest)" ]; then
                warn=$(echo "$warn"; echo "$line <= $latest")
            fi
       done
    # if arguments provided
    else
        for app in "$@"; do
            local latest=$(brew cask _stanza version $app)
            local line=$(echo "$installed" | grep $app)
            local tests=$(echo $line | grep $latest)
            if [ -z "$tests" ]; then
                echo "$line < $latest"
            fi
            if [ -n "$(echo $line | grep latest)" ] || [ -n "$(echo $latest | grep latest)" ]; then
                warn=$(echo "$warn"; echo "$line <= $latest")
            fi
        done
    fi
    if [ -n "$warn" ]; then
        printf "NOTICE: some versions matched 'latest'"
        echo "$warn"
    fi
}

