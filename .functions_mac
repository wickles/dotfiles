#!/bin/bash

## Mac specific fuctions


## Utility functions
# fix app store being retarded by killing all the shit
alias fix-appstore="pkill storedownload storeasset storeacc storeuid storeleg storeinst"
# fix Dock and/or Launchpad
alias fix-dock="killall Dock"
# reload hosts file -- must be run with sudo
alias reload-hosts="{ dscacheutil -flushcache; killall -HUP mDNSResponder; }"
# open file in Preview
alias Preview="open -aPreview"


## brew-cask alternative/new functions

alias brew-cask-upgrade="brew cask install --force"
alias brew-cask-outdated="brew cask outdated --greedy --verbose | grep -v latest"
alias brew-cask-outdated-latest="brew cask outdated --greedy --verbose | grep --color=never latest"
alias brew-cask-df="du -sh $(brew --prefix)/Caskroom/*/* $(brew --prefix)/Caskroom | sort -h"
alias brew-cask-relics="brew cask list --versions"
# pass --calculate to compute new checkpoint
alias brew-cask-appcast="brew cask _appcast_checkpoint"

# find all local casks with outdated appcasts
brew-cask-outdated-appcast () {
    local ARGS
    if [[ $# -eq 0 ]]; then
        ARGS=$(brew cask list)
    else
        ARGS=$(echo "$@" | tr -s '[:space:]' '\n')
    fi
    while read line; do
        local old=$(brew cask _appcast_checkpoint --calculate ${line} 2>&1)
        local new=$(brew cask _appcast_checkpoint ${line} 2>&1)
        if [[ "$old" != "$new" ]]; then
            local old_short=$(echo $old | cut -c1-12)
            local new_short=$(echo $new | cut -c1-12)
            echo "$line $old_short != $new_short"
        fi
    done <<< "$ARGS"
}

# list installed casks not found in repository (renamed, migrated, or removed)
brew-cask-missing () {
    local list=$(brew cask list -1)
    local casks=$(brew search --casks)
    while read line; do
        if ! [[ $casks =~ (^|[[:space:]])$line($|[[:space:]]) ]]; then
            #brew cask list --versions "$line"
            echo "$line"
        fi
    done <<< "$list"
}

# helper function for scrubbing casks
__brew-cask-scrubber () {
    local cask="$1"
    local caskBasePath="$(brew --prefix)/Caskroom"
    local caskDirectory="$caskBasePath/$cask"
    local versionsFound="$(ls -1 $caskDirectory/.metadata | sort -rV)"
    local versionToKeep="$(echo $versionsFound | sed 1q)"
    local versionsToRemove="$(echo $versionsFound | sed 1,1d | sort -V)"
    if [[ -z "$versionsToRemove" ]]; then
        echo "Cask $cask is already clean."
        return
    fi
    echo "Cleaning cask $cask ..."
    if echo "$versionsFound" | grep -q latest; then
        echo "WARNING: Contains version 'latest', check that version to keep is identified correctly."
    fi
    echo "Keeping: $versionToKeep"
    echo "Removing: $(echo $versionsToRemove | xargs)"

    echo -n "OK to proceed (y/n)? "
    read answer </dev/tty
    if ! echo "$answer" | grep -iq "^y" ; then
        echo "Aborted."
        return
    fi

    if [[ -n ${versionsToRemove} ]]; then
        pushd $caskDirectory >/dev/null
        while read version ; do
            echo "Removing ${cask} ${version} ..."
            rm -rf "${version}"
            rm -rf ".metadata/${version}"
        done <<< "$versionsToRemove"
        popd >/dev/null
    fi
}

# TODO: change to pass $(brew cask list --versions <args>) output as param to __cask-scrub
# delete old relics, for some or all casks
brew-cask-scrub () {
    local ARGS
    if [[ $# -eq 0 ]]; then
        echo -n "Scrub ALL installed casks (y/n)? "
        read answer </dev/tty
        if ! echo "$answer" | grep -iq "^y" ; then
            echo "Aborted."
            return
        fi
        ARGS=$(brew cask list -1)
    else
        ARGS=$(echo "$@" | tr -s '[:space:]' '\n')
    fi
    while read line; do
      __brew-cask-scrubber "${line}"
    done <<< "$ARGS"
}

